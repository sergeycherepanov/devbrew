---
- name: Ensure php taps are untapped.
  homebrew_tap: "tap={{ item }} state=absent"
  with_items:
  - "kyslik/homebrew-php"
  - "sergeycherepanov/php"

- name: Ensure php taps are tapped.
  homebrew_tap: "tap={{ item }} state=present"
  with_items:
  - "digitalspacestdio/common"
  - "digitalspacestdio/php"

- name: "Unlinking all already installed php packages"
  shell: "brew list --formula | grep php | xargs brew unlink"
  when: ansible_system == "Darwin"

- name: "Unlinking all already installed php packages"
  shell: "brew list --formula | grep php | xargs --no-run-if-empty brew unlink"
  when: ansible_system == "Linux"

- name: "Installing {{ php_version }} dependencies"
  homebrew:
    name: "{{ php_dependencies }}"
    state: latest

- name: "Installing {{ php_version }} with flags: {{ php_flags }}"
  homebrew:
    name: "{{ php_version }}"
    state: latest
    install_options: "{{ php_flags }}"

- name: "Installing {{ php_version }} modules"
  homebrew:
    name: "{{ php_modules }}"
    state: latest
    install_options: "build-from-source"

- name: "Remove outdated {{ php_version }}"
  shell: "brew cleanup {{ php_version }} > /dev/null 2>&1"
  ignore_errors: yes

- name: "Installing {{ php_version }} pear packages"
  shell: "pear install {{ item }}"
  with_items: "{{ php_pear_packages }}"

- name: "Add {{ php_version }} wrapper"
  template:
    src: "php.j2"
    dest: "{{ brew_install_path }}/bin/{{ php_version }}"
    owner: "{{ brew_user }}"
    group: "{{ brew_group }}"
    mode: 0755

- name: "Ensure x{{ php_version }} wrapper directory"
  file:
    path: "{{ brew_install_path }}/opt/xphp/{{ php_version_num }}/bin"
    state: directory

- name: "Create php-fpm.conf for {{ php_version }}"
  template:
    src: php-fpm.conf.j2
    dest: "{{ brew_install_path }}/etc/php/{{ php_version_num }}/php-fpm.conf"
    owner: "{{ brew_user }}"
    group: "{{ brew_group }}"

- name: "Create php.ini for {{ php_version }}"
  template:
    src: php.ini.j2
    dest: "{{ brew_install_path }}/etc/php/{{ php_version_num }}/php.ini"
    owner: "{{ brew_user }}"
    group: "{{ brew_group }}"

- name: "Create php-fpm-xdebug.conf for {{ php_version }}"
  template:
    src: php-fpm-xdebug.conf.j2
    dest: "{{ brew_install_path }}/etc/php/{{ php_version_num }}/php-fpm-xdebug.conf"
    owner: "{{ brew_user }}"
    group: "{{ brew_group }}"

- name: "{{ brew_install_path }}/etc/nginx/php.d"
  file:
    path: "{{ brew_install_path }}/opt/xphp/{{ php_version_num }}/bin"
    state: directory

- name: "Ensure {{ brew_install_path }}/etc/nginx/php.d/{{ php_version }}.conf"
  template:
    src: php_nginx_snippet.conf.j2
    dest: "{{ brew_install_path }}/etc/nginx/php.d/{{ php_version }}.conf"
    owner: "{{ brew_user }}"
    group: "{{ brew_group }}"

- name: "Disabling xdebug by default for {{ php_version }}"
  lineinfile:
    path: '{{ brew_install_path }}/etc/php/{{ php_version_num }}/conf.d/ext-xdebug.ini'
    regexp: '^(zend_extension=.*)'
    line: ';\1'
    backrefs: yes

- name: "Create php-xdebug.ini for {{ php_version }}"
  template:
    src: php.ini.j2
    dest: "{{ brew_install_path }}/etc/php/{{ php_version_num }}/php-xdebug.ini"
    owner: "{{ brew_user }}"
    group: "{{ brew_group }}"

- name: "Enabling xdebug in php-xdebug.ini for {{ php_version }}"
  when: "php_version_num_int < 73"
  copy:
    dest: '{{ brew_install_path }}/etc/php/{{ php_version_num }}/conf.d/ext-xdebug.ini'
    content: |
      [xdebug]
      ;zend_extension="{{ brew_install_path }}/opt/{{ php_version }}-xdebug/xdebug.so"
      xdebug.remote_enable = 1
      xdebug.remote_autostart = 0
      xdebug.remote_connect_back = 0
      xdebug.remote_host = 127.0.0.1
      xdebug.remote_port = 92{{ php_version_num_int }}
      xdebug.profiler_enable = 0
      xdebug.profiler_output_dir = /tmp/xdebug{{ php_version_num_int }}
      xdebug.idekey = PHPSTORM
      xdebug.overload_var_dump = 0
      xdebug.max_nesting_level = 500

- name: "Enabling xdebug in php-xdebug.ini for {{ php_version }}"
  when: "php_version_num_int > 72"
  copy:
    dest: '{{ brew_install_path }}/etc/php/{{ php_version_num }}/conf.d/ext-xdebug.ini'
    content: |
      [xdebug]
      ;zend_extension="{{ brew_install_path }}/opt/{{ php_version }}-xdebug/xdebug.so"
      xdebug.mode = debug
      xdebug.start_with_request = yes
      xdebug.client_host = 127.0.0.1
      xdebug.client_port = 92{{ php_version_num_int }}
      xdebug.discover_client_host = false
      xdebug.remote_cookie_expire_time = 3600
      xdebug.idekey = PHPSTORM
      xdebug.overload_var_dump = 0
      xdebug.max_nesting_level = 500

- name: "Create ext-opcache.ini for {{ php_version }}"
  template:
    src: "ext-opcache.ini.j2"
    dest: "{{ brew_install_path }}/etc/php/{{ php_version_num }}/conf.d/ext-opcache.ini"
    owner: "{{ brew_user }}"
    group: "{{ brew_group }}"

- name: "Unlink {{ php_version }}"
  homebrew: "name={{ php_version }} state=unlinked"
  ignore_errors: yes

- name: Adding '{{ php_version_num_int }}' to "php_versions" array
  set_fact:
    php_versions: "{{ php_versions + [ php_version_num_int ] }}"

#- name: Setting default php to {{ php_version_num_int }}
#  set_fact:
#    default_php: "{{ php_version_num_int }}"

- debug:
    var: php_versions

- name: "Create etc/supervisor.d/{{ php_version }}.ini"
  template:
    src: supervisord.ini.j2
    dest: "{{ brew_install_path }}/etc/supervisor.d/{{ php_version }}.ini"

- name: "Ensure EFK config directory"
  file:
    path: "{{ brew_install_path }}/etc/efk/td-agent/conf.d"
    state: directory

- name: "Creates {{ brew_install_path }}/etc/efk/td-agent/conf.d/php{{ php_version_num }}.conf"
  template:
    src: td-agent.php.conf.j2
    dest: "{{ brew_install_path }}/etc/efk/td-agent/conf.d/php{{ php_version_num }}.conf"
    owner: "{{ brew_user }}"
    group: "{{ brew_group }}"

- name: "Unlinking all already installed php packages"
  shell: "brew list --formula | grep php | xargs brew unlink"
  when: ansible_system == "Darwin"

- name: "Unlinking all already installed php packages"
  shell: "brew list --formula | grep php | xargs --no-run-if-empty brew unlink"
  when: ansible_system == "Linux"

- name: "Linking php"
  shell: "brew link --overwrite {{ php_version }}"
